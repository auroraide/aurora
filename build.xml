<?xml version="1.0" encoding="utf-8" ?>
<project xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:jacoco="antlib:org.jacoco.ant" name="Aurora" default="devmode">

    <!-- very important project directories -->
    <property name="lib.dir" value="lib"/>
    <property name="src.dir" value="src"/>
    <property name="test.dir" value="test"/>
    <property name="war.dir" value="war"/>
    <property name="war.classes.dir" value="${war.dir}/WEB-INF/classes"/>
    <property name="war.lib.dir" value="${war.dir}/WEB-INF/lib"/>
    <property name="vendor.dir" value="vendor"/>
    <property name="docs.dir" value="docs"/>
    <property name="tex.dir" value="${docs.dir}/entwurf/tex"/>
    <property name="html.dir" value="${docs.dir}/entwurf/html"/>

    <!-- important jacoco directories -->
    <property name="jacoco.dir" value="${war.dir}/jacoco"/>
    <property name="jacoco.report.dir" value="${jacoco.dir}/site/jacoco"/>
    <property name="jacoco.report.dir" value="${jacoco.dir}/site/jacoco" />
    <property name="jacoco.exec.file" value="${jacoco.dir}/jacoco/jacoco.exec"/>

    <!-- use project specific ivy dir -->
    <property name="ivy.default.ivy.user.dir" value="${basedir}/.ivy"/>

    <!-- path to gwt sdk -->
    <property name="gwt.sdk" location="../gwt-2.8.2"/>
    <property name="gwt.args" value=""/>

    <!-- the holy class path -->
    <path id="project.class.path">
        <pathelement location="${war.classes.dir}"/>
        <pathelement location="${gwt.sdk}/gwt-user.jar"/>
        <pathelement location="${gwt.sdk}/gwt-dev.jar"/>
        <pathelement location="${gwt.sdk}/validation-api-1.0.0.GA.jar"/>
        <pathelement location="${gwt.sdk}/validation-api-1.0.0.GA-sources.jar"/>
        <pathelement location="${src.dir}"/>
        <pathelement location="${test.dir}"/>
        <fileset dir="${war.lib.dir}" includes="**/*.jar" erroronmissingdir="false"/>
    </path>

    <!-- public ant targets -->
    <target name="devmode" depends="-javac" description="Run GWT app in development mode.">
        <java
                failonerror="true"
                fork="true"
                classname="com.google.gwt.dev.DevMode"
                maxmemory="1g">
            <classpath>
                <pathelement location="${src.dir}"/>
                <path refid="project.class.path"/>
            </classpath>
            <arg value="-startupUrl"/>
            <arg value="Aurora.html"/>
            <arg line="-war"/>
            <arg value="${war.dir}"/>
            <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
            <arg value="-style"/>
            <arg value="DETAILED"/>
            <arg line="${gwt.args}"/>
            <arg value="aurora.Aurora"/>
            <arg value="aurora.Aurora"/>
        </java>

    </target>

    <target name="build" depends="-gwtc" description="Compile java source to bytecode."/>

    <target name="test" description="Build and run test suite.">
        <antcall target="cs"/>
        <antcall target="build"/>
        <antcall target="-junit"/>
    </target>

    <target name="selenium-test" description="Build and test selenium tests.">
        <!--<antcall target="cs"/>-->
        <antcall target="build"/>
        <antcall target="junit-selenium"/>
    </target>

    <target name="junit-selenium" depends="-javac-test">
        <junit printsummary="yes" haltonfailure="yes">
            <classpath refid="project.class.path"/>
            <formatter type="plain" usefile="false"/>
            <batchtest fork="yes">
                <fileset dir="${test.dir}">
                    <include name="**/*SeleniumTest.java"/>
                    <exclude name="**/*GwtTest"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="gwt-test" description="Build and test gwt tests.">
        <!--<antcall target="cs"/>-->
        <antcall target="build"/>
        <antcall target="-junit-gwt"/>
    </target>

    <target name="junit-test" description="Build and test unit tests.">
        <!--<antcall target="cs"/>-->
        <antcall target="-junit-unit"/>
    </target>

    <target name="cs" depends="-libs" description="Run checkstyle.">
        <taskdef
                resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties"
                classpathref="project.class.path"/>
        <checkstyle config="google_checks_but_120.xml">
            <fileset dir="${src.dir}" includes="**/*.java"/>
            <fileset dir="${test.dir}" includes="**/*.java"/>
        </checkstyle>
    </target>

    <target name="jacoco-report">
        <antcall target="cs"/>
        <antcall target="-jacoco-report"/>
    </target>


    <target name="doc" depends="-libs" description="Generate javadoc.">
        <delete dir="${html.dir}"/>
        <mkdir dir="${html.dir}"/>
        <javadoc
                destdir="${html.dir}"
                sourcepath="${src.dir}"
                packagenames="aurora.*"
                classpathref="project.class.path"
                failonerror="true">
        </javadoc>
    </target>

    <target name="texdoc" depends="-libs" description="Generate javadoc using TeXDoclet.">
        <delete file="${tex.dir}/javadoc.tex"/>
        <javadoc
                sourcepath="${src.dir}"
                packagenames="aurora.*"
                classpathref="project.class.path"
                failonerror="true">
            <doclet name="org.wonderly.doclets.TexDoclet" path="${vendor.dir}/texdoclet-0.9.3.jar">
                <param name="-output" value="${tex.dir}/javadoc.tex"/>
            </doclet>
        </javadoc>
    </target>

    <target name="clean" description="Make clean.">
        <delete dir="${war.dir}/aurora" failonerror="false"/>
        <delete dir="${war.classes.dir}" failonerror="false"/>
        <delete dir="${war.lib.dir}" failonerror="false"/>
        <delete dir="${lib.dir}" failonerror="false"/>
        <delete dir="${html.dir}" failonerror="false"/>
        <antcall target="-ivy-clean"/>
    </target>

    <target name="jacoco-clean">
        <delete dir="${jacoco.dir}"/>
    </target>

    <target name="war" depends="build" description="Pack everything into a WAR file.">
        <zip destfile="aurora.war" basedir="${war.dir}"/>
    </target>

    <target name="dependency-tree" depends="-ivy-resolve">
        <ivy:dependencytree/>
    </target>

    <!-- private ant targets -->
    <target name="-ivy-resolve">
        <ivy:retrieve/>
    </target>

    <target name="-ivy-clean">
        <ivy:cleancache/>
    </target>

    <target name="-libs" depends="-ivy-resolve">
        <mkdir dir="${war.lib.dir}"/>
        <copy todir="${war.lib.dir}">
            <fileset dir="${lib.dir}" includes="**/*.jar"/>
        </copy>
        <copy todir="${war.lib.dir}" file="${gwt.sdk}/gwt-servlet.jar"/>
        <copy todir="${war.lib.dir}" file="${gwt.sdk}/gwt-servlet-deps.jar"/>
    </target>

    <target name="-junit" depends="-javac-test">
        <junit printsummary="yes" haltonfailure="yes">
            <classpath refid="project.class.path"/>
            <formatter type="plain" usefile="false"/>
            <batchtest fork="yes">
                <fileset dir="${test.dir}">
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="-junit-unit" depends="-javac-test">
            <junit printsummary="yes" haltonfailure="yes">
                <classpath>
                    <path refid="project.class.path"/>
                    <pathelement location="${war.classes.dir}"/>
                </classpath>
                <formatter type="plain" usefile="false"/>
                <batchtest fork="yes">
                    <fileset dir="${test.dir}">
                        <include name="**/*Test.java"/>
                        <exclude name="**/*GwtTest.java"/>
                        <exclude name="**/*SeleniumTest.java"/>
                    </fileset>
                </batchtest>
            </junit>
    </target>

    <target name="-junit-gwt" depends="-javac-test">
        <junit printsummary="yes" haltonfailure="yes">
            <classpath refid="project.class.path"/>
            <formatter type="plain" usefile="false"/>
            <batchtest fork="yes">
                <fileset dir="${test.dir}">
                    <include name="**/*GwtTest.java"/>
                    <exclude name="**/*Test"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="-junit-jacoco" depends="-javac-test">
        <delete dir="${jacoco.dir}"/>
        <jacoco:coverage destfile="${jacoco.exec.file}">
            <junit fork="true" forkmode="once" printsummary="yes" haltonfailure="yes">
                <classpath>
                    <path refid="project.class.path"/>
                    <pathelement location="${war.classes.dir}"/>
                </classpath>
                <formatter type="plain" usefile="false"/>
                <batchtest fork="yes">
                    <fileset dir="${test.dir}">
                        <include name="**/*Test.java"/>
                        <exclude name="**/*GwtTest.java"/>
                        <exclude name="**/*SeleniumTest.java"/>
                    </fileset>
                </batchtest>
            </junit>
        </jacoco:coverage>
    </target>

    <target name="-jacoco-report" depends="-junit-jacoco">
        <jacoco:report>

            <!-- This task needs the collected execution data and ... -->
            <executiondata>
                <file file="${jacoco.exec.file}"/>
            </executiondata>

            <!-- the class files and optional source files ... -->
            <structure name="Aurora Backend Code Coverage">
                <classfiles>
                    <fileset dir="${war.classes.dir}/aurora/backend"/> <!-- Change what you want to see in report here -->
                </classfiles>
                <sourcefiles encoding="UTF-8">
                    <fileset dir="${src.dir}"/>
                </sourcefiles>
            </structure>

            <!-- to produce reports in different formats. -->
            <html destdir="${jacoco.report.dir}"/>
            <csv destfile="${jacoco.report.dir}/report.csv"/>
            <xml destfile="${jacoco.report.dir}/report.xml"/>
        </jacoco:report>
    </target>

    <target name="-javac" depends="-libs">
        <mkdir dir="${war.classes.dir}"/>
        <javac
                srcdir="${src.dir}"
                includes="**"
                encoding="utf-8"
                destdir="${war.classes.dir}"
                source="1.8"
                target="1.8"
                debug="true"
                debuglevel="lines,vars,source"
                includeantruntime="false">
            <classpath refid="project.class.path"/>
        </javac>
    </target>

    <target name="-javac-test" depends="-javac">
        <javac
                srcdir="${test.dir}"
                includes="**"
                encoding="utf-8"
                destdir="${war.classes.dir}"
                source="1.8"
                target="1.8"
                debug="true"
                debuglevel="lines,vars,source"
                includeantruntime="false">
            <classpath refid="project.class.path"/>
        </javac>
    </target>

    <target name="-gwtc" depends="-javac">
        <java
                failonerror="true"
                fork="true"
                classname="com.google.gwt.dev.Compiler"
                maxmemory="512m">
            <classpath>
                <pathelement location="${src.dir}"/>
                <path refid="project.class.path"/>
            </classpath>
            <arg line="-war"/>
            <arg value="${war.dir}"/>
            <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
            <arg line="${gwt.args}"/>
            <arg value="aurora.Aurora"/>
        </java>
    </target>

</project>
